@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging

<MudThemeProvider IsDarkMode="this.isDarkMode" Theme="Themes.Default" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<ErrorBoundary>
  <ChildContent>
    <CascadingValue Value="this.isDarkMode" Name="IsDarkMode">
      <CascadingValue Value="this.switchIsDarkModeCallback" Name="SwitchIsDarkMode">
        <Router AppAssembly="@typeof(Program).Assembly">
          <Found Context="routeData">
            @if (routeData != null)
            {
              var pageType = routeData.PageType;
              var allowAnonymousAttribute = pageType.GetCustomAttributes(typeof(AllowAnonymousAttribute), true).FirstOrDefault();
              if (allowAnonymousAttribute == null)
              {
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
              }
              else
              {
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
              }
            }
          </Found>
          <NotFound>
            <NotFoundContent />
          </NotFound>
        </Router>
      </CascadingValue>
    </CascadingValue>
  </ChildContent>
  <ErrorContent>
    <ErrorBoundaryContent />
  </ErrorContent>
</ErrorBoundary>

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage
@inject ILogger<App> Logger

@code {
  private const string IsDarkModeStorageKey = ".AgilePoker.IsDarkMode";

  private bool isDarkMode = false;

  private EventCallback<bool> switchIsDarkModeCallback;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var storedIsDarkMode = await this.LocalStorage.GetAsync<bool>(IsDarkModeStorageKey);
      this.isDarkMode = storedIsDarkMode.Value;
    }
    catch (System.Security.Cryptography.CryptographicException cex)
    {
      await this.LocalStorage.SetAsync(IsDarkModeStorageKey, this.isDarkMode);
      this.Logger.LogWarning(cex, "Error during read IsDarkMode from protected local storage");
    }

    this.switchIsDarkModeCallback = new EventCallbackFactory().Create<bool>(this, this.SwitchIsDarkMode);
  }

  private async Task SwitchIsDarkMode(bool isDarkMode)
  {
    this.isDarkMode = isDarkMode;
    await this.LocalStorage.SetAsync(IsDarkModeStorageKey, this.isDarkMode);
  }
}