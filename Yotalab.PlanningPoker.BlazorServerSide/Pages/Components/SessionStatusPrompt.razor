@using Grains.Interfaces.Models
@inject SessionService Service

<div class="session-status-promt">
  <MudAlert Dense="true" NoIcon="true" Class="mud-alert-width-100 mb-2" Severity="this.alertSeverity" Elevation="1">
    <div class="d-flex justify-space-between align-center">
      <strong class="ms-2">@sessionStatus</strong>
      @if (this.Session.ModeratorIds.Contains(this.ParticipantId))
      {
        @if (this.Session.ProcessingState == SessionProcessingState.Finished)
        {
          <MudButtonGroup DisableElevation="true" Variant="Variant.Filled" Size="Size.Small" OverrideStyles="false">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                           Size="Size.Small"
                           Class="px-1"
                           Variant="Variant.Filled"
                           Color="Color.Default"
                           Title="Обнулить"
                           Disabled="@this.isSessionStateChanging"
                           @onclick="@(async () => await this.ChangeSessionState(SessionProcessingState.Initial))"
                           @ondblclick:stopPropagation="true">
            </MudIconButton>
            <MudButton Disabled="@this.isSessionStateChanging"
                       Style="text-transform:none"
                       Size="Size.Small"
                       Color="this.buttonColor"
                       Variant="Variant.Filled"
                       @onclick="@(async () => await this.ChangeSessionState(requestedState, true))"
                       @ondblclick:stopPropagation="true">
              @buttonText
            </MudButton>
          </MudButtonGroup>
        }
        else
        {
          <MudButton Disabled="@this.isSessionStateChanging"
                     Size="Size.Small"
                     Style="text-transform:none"
                     Variant="Variant.Filled"
                     Color="this.buttonColor"
                     @onclick="@(async () => await this.ChangeSessionState(requestedState))"
                     @ondblclick:stopPropagation="true">
            @buttonText
          </MudButton>
        }
      }
    </div>
  </MudAlert>
</div>

@code {
  [Parameter]
  public Guid ParticipantId { get; set; }

  [CascadingParameter]
  public SessionInfo Session { get; set; }

  private Severity alertSeverity;
  private Color buttonColor;
  private string buttonText;
  private string sessionStatus;
  private SessionProcessingState requestedState;
  private bool isSessionStateChanging = false;

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    this.buttonText = "Начать";
    this.sessionStatus = "Голосование не проводится";
    this.requestedState = SessionProcessingState.Started;
    this.alertSeverity = Severity.Normal;
    this.buttonColor = Color.Primary;

    if (this.Session.ProcessingState == SessionProcessingState.Started)
    {
      this.buttonText = "Остановить";
      this.sessionStatus = "Голосование началось...";
      this.requestedState = SessionProcessingState.Stopped;
      this.alertSeverity = Severity.Info;
      this.buttonColor = Color.Warning;
    }
    else if (this.Session.ProcessingState == SessionProcessingState.Stopped)
    {
      this.buttonText = "Завершить";
      this.sessionStatus = "Голосование остановлено";
      this.requestedState = SessionProcessingState.Finished;
      this.alertSeverity = Severity.Warning;
      this.buttonColor = Color.Success;
    }
    else if (this.Session.ProcessingState == SessionProcessingState.Finished)
    {
      this.buttonText = "Перезапустить";
      this.sessionStatus = "Голосование завершилось";
      this.requestedState = SessionProcessingState.Started;
      this.alertSeverity = Severity.Success;
      this.buttonColor = Color.Primary;
    }
  }

  private async Task ChangeSessionState(SessionProcessingState requestedState, bool isRestart = false)
  {
    try
    {
      this.isSessionStateChanging = true;
      if (requestedState == SessionProcessingState.Initial)
        await this.Service.ResetAsync(this.Session.Id, this.ParticipantId);
      else if (requestedState == SessionProcessingState.Started)
      {
        if (isRestart)
          await this.Service.RestartAsync(this.Session.Id, this.ParticipantId);
        else
          await this.Service.StartAsync(this.Session.Id, this.ParticipantId);
      }
      else if (requestedState == SessionProcessingState.Stopped)
        await this.Service.StopAsync(this.Session.Id, this.ParticipantId);
      else if (requestedState == SessionProcessingState.Finished)
        await this.Service.FinishAsync(this.Session.Id, this.ParticipantId);

      // Небольшая задержка, иначе можно успеть быстро клянуть 2 раза и перескочить через состояние.
      await Task.Delay(100);
    }
    finally
    {
      this.isSessionStateChanging = false;
    }
  }
}
