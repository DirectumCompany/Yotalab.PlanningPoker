@using Grains.Interfaces.Models
@using Yotalab.PlanningPoker.BlazorServerSide.Services.DTO

@{
  var hasMenu = false;
  if (this.Session.ModeratorIds.Contains(this.ParticipantId))
  {
    // Меню на другом участнике сессии.
    if (this.ParticipantId != this.Participant.Id)
    {
      hasMenu = true;
    }
    else // Меню на себе.
    {
      if (this.Session.ModeratorIds.Length > 1)
      {
        hasMenu = true;
      }
    }
  }
  else // Меню участника.
  {
    // Меню на себе.
    if (this.ParticipantId == this.Participant.Id)
    {
      hasMenu = true;
    }
    else // Меню на другом участнике сессии.
    {
      // Нет элементов.
    }
  }

  if (hasMenu)
  {
    <MudMenu Direction="Direction.Bottom" OffsetY="true">
      <ActivatorContent>
        <Avatar Url="@this.Participant.AvatarUrl" />
      </ActivatorContent>
      <ChildContent>
        @if (this.Session.ModeratorIds.Contains(this.ParticipantId))
        {
          // Меню на другом участнике сессии.
          if (this.ParticipantId != this.Participant.Id)
          {
            if (this.Session.ModeratorIds.Contains(this.Participant.Id))
            {
              <MudMenuItem OnClick="@(async () => await this.SessionService.RemoveModerator(this.Session.Id, this.Participant.Id))">
                <div class="d-flex align-items-center">
                  <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.RemoveModerator" Color="Color.Default" />
                  <MudText Style="margin-bottom:-1px">Отменить модератора</MudText>
                </div>
              </MudMenuItem>
            }
            else
            {
              <MudMenuItem OnClick="@(async () => await this.SessionService.AddModerator(this.Session.Id, this.Participant.Id))">
                <div class="d-flex align-items-center">
                  <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.AddModerator" Color="Color.Warning" />
                  <MudText Style="margin-bottom:-1px">Сделать модератором</MudText>
                </div>
              </MudMenuItem>
            }
            <MudMenuItem OnClick="@(async () => await this.Service.KickAsync(this.Session.Id, this.Participant.Id, this.ParticipantId))">
              <div class="d-flex align-items-center">
                <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.PersonRemove" Color="Color.Error" />
                <MudText Style="margin-bottom:-1px">Исключить</MudText>
              </div>
            </MudMenuItem>
          }
          else // Меню на себе.
          {
            if (this.Session.ModeratorIds.Length > 1)
            {
              <MudMenuItem OnClick="@(async () => { await this.Service.LeaveAsync(this.Session.Id, this.ParticipantId); })">
                <div class="d-flex align-items-center">
                  <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
                  <MudText Style="margin-bottom:-1px">Покинуть сессию</MudText>
                </div>
              </MudMenuItem>
            }
          }
        }
        else // Меню участника.
        {
          // Меню на себе.
          if (this.ParticipantId == this.Participant.Id)
          {
            <MudMenuItem OnClick="@(async () => { await this.Service.LeaveAsync(this.Session.Id, this.ParticipantId); })">
              <div class="d-flex align-items-center">
                <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
                <MudText Style="margin-bottom:-1px">Покинуть сессию</MudText>
              </div>
            </MudMenuItem>
          }
          else // Меню на другом участнике сессии.
          {
            // Нет элементов.
          }
        }
      </ChildContent>
    </MudMenu>
  }
  else
  {
    <Avatar Url="@this.Participant.AvatarUrl" />
  }
}

@code {
  [Parameter]
  public ParticipantInfoDTO Participant { get; set; }

  [Parameter]
  public Guid ParticipantId { get; set; }

  [CascadingParameter]
  public SessionInfo Session { get; set; }

  @inject ParticipantsService Service
  @inject SessionService SessionService
}
