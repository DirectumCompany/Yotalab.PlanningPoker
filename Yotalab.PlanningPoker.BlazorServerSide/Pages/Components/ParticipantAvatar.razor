@using Grains.Interfaces.Models
@using Yotalab.PlanningPoker.BlazorServerSide.Services.DTO

@{
  var dropDownItems = new List<DropDownMenuItem>();
  var menuItems = new List<MudMenuItem>();
  // Строим меню модератора.
  if (this.Session.ModeratorIds.Contains(this.ParticipantId))
  {
    // Меню на другом участнике сессии.
    if (this.ParticipantId != this.Participant.Id)
    {
      if (this.Session.ModeratorIds.Contains(this.Participant.Id))
      {
        dropDownItems.Add(new DropDownMenuItem()
        {
          OnClickAsync = (args) => this.SessionService.RemoveModerator(this.Session.Id, this.Participant.Id),
          ItemTemplate =
          @<div class="d-flex align-center">
            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.RemoveModerator" Color="Color.Default" />
            <MudText Style="margin-bottom:-1px">Отменить модератора</MudText>
          </div>
        });
      }
      else
      {
        dropDownItems.Add(new DropDownMenuItem()
        {
          OnClickAsync = (args) => this.SessionService.AddModerator(this.Session.Id, this.Participant.Id),
          ItemTemplate =
          @<div class="d-flex align-center">
            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.AddModerator" Color="Color.Warning" />
            <MudText Style="margin-bottom:-1px">Сделать модератором</MudText>
          </div>
        });
      }

      dropDownItems.Add(new DropDownMenuItem()
      {
        OnClickAsync = (args) => this.Service.KickAsync(this.Session.Id, this.Participant.Id, this.ParticipantId),
        ItemTemplate =
        @<div class="d-flex align-center">
          <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.PersonRemove" Color="Color.Error" />
          <MudText Style="margin-bottom:-1px">Исключить</MudText>
        </div>
      });
    }
    else // Меню на себе.
    {
      if (this.Session.ModeratorIds.Length > 1)
      {
        dropDownItems.Add(new DropDownMenuItem()
        {
          OnClickAsync = (args) => this.Service.LeaveAsync(this.Session.Id, this.ParticipantId),
          ItemTemplate =
          @<div class="d-flex align-center">
            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
            <MudText Style="margin-bottom:-1px">Покинуть сессию</MudText>
          </div>
        });
      }
    }
  }
  else // Меню участника.
  {
    // Меню на себе.
    if (this.ParticipantId == this.Participant.Id)
    {
      dropDownItems.Add(new DropDownMenuItem()
      {
        OnClickAsync = (args) => this.Service.LeaveAsync(this.Session.Id, this.ParticipantId),
        ItemTemplate =
        @<div class="d-flex align-center">
            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
            <MudText Style="margin-bottom:-1px">Покинуть сессию</MudText>
          </div>
      });
    }
    else // Меню на другом участнике сессии.
    {
      // Нет элементов.
    }
  }

  if (dropDownItems.Count > 0)
  {
    <DropDownMenu Items="dropDownItems">
      <ButtonTemplate>
        <Avatar Url="@this.Participant.AvatarUrl" />
      </ButtonTemplate>
    </DropDownMenu>
  }
  else
  {
    <Avatar Url="@this.Participant.AvatarUrl" />
  }
}

@code {
  [Parameter]
  public ParticipantInfoDTO Participant { get; set; }

  [Parameter]
  public Guid ParticipantId { get; set; }

  [CascadingParameter]
  public SessionInfo Session { get; set; }

  @inject ParticipantsService Service
  @inject SessionService SessionService
}
