<div class="bulletin-editor-root">
  @if (this.IsEditMode)
  {
    <div class="bulletin-editor-toolbox ml-3">
      <MudIconButton Class="bulletin-editor-toolbox-add"
                   OnClick="this.HandleAddVoteClick"
                   Icon="@Icons.Material.Filled.Add"
                   Variant="Variant.Filled"
                   Color="Color.Tertiary">
      </MudIconButton>

      <MudMenu Label="@UIResources.BulletinEditModeEmojiMenuLabel"
             Class="d-sm-flex d-md-none pa-2"
             Variant="Variant.Filled"
             FullWidth="true"
             EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
             IconColor="Color.Secondary">
        @foreach (var emoji in this.emojiCards)
        {
          <MudMenuItem OnClick="(args) => this.HandleAddEmojiVoteClick(emoji)">
            <MudText Typo="Typo.h6"
                 Align="Align.Center">
              @emoji
            </MudText>
          </MudMenuItem>
        }
      </MudMenu>

      <MudPaper Class="bulletin-editor-toolbox-emoji d-none d-sm-none d-md-flex ml-2">
        @foreach (var emoji in this.emojiCards)
        {
          <MudText Typo="Typo.h6"
               @onclick="(args) => this.HandleAddEmojiVoteClick(emoji)"
               Class="cursor-pointer px-2"
               Align="Align.Center">
            @emoji
          </MudText>
        }
      </MudPaper>
    </div>
  }

  @if (this.IsEditMode)
  {
    <MudDropContainer T="BulletinItemViewModel"
                    @ref="this.itemsReorderContainer"
                    Class="bulletin-editor-drop-container"
                    Items="@bulletinEditViewModels.Items"
                    ItemsSelector="@((item, dropzone) => true)"
                    ItemDropped="HandleVoteDropped">
      <ChildContent>
        <MudDropZone T="BulletinItemViewModel"
                   Identifier="Bulletin"
                   Class="bulletin-editor py-3 gap-3"
                   AllowReorder="true" />
      </ChildContent>
      <ItemRenderer>
        @{
          var paperStyle = context.IsInvalid ? "border: 1px solid red" : null;
        }
        <MudPaper Class="bulletin-item" Style="@paperStyle">
          <MudIcon Class="bulletin-item-remove"
                 Size="@Size.Small"
                 Icon="@Icons.Material.Rounded.Cancel"
                 Color="Color.Secondary"
                 @onclick="@(() => this.HandleRemoveVoteClick(context))">
          </MudIcon>
          <div class="bulletin-item-value py-2">
            <input maxlength="4"
                 class="bulletin-item-value-editor mud-typography mud-typography-h4 mud-inherit-text"
                 size="2"
                 value="@context.Vote.Value"
                 @onchange="@((args) => this.HandleVoteValueChange(context, args))"
                 type="text" />
          </div>
        </MudPaper>
      </ItemRenderer>
    </MudDropContainer>
  }
  else
  {
    <div class="bulletin-editor-drop-container">
      <div class="bulletin-editor py-3 gap-3">
        @foreach (var bulletinItem in this.Bulletin.Items)
        {
          var vote = bulletinItem.Vote;
          if (vote.IsUnset)
            continue;

          var voteChecked = !bulletinItem.IsDisabled;
          <MudPaper Class="bulletin-item">
            <MudCheckBox T="bool"
                     Class="bulletin-item-check"
                     Value="voteChecked"
                     ValueChanged="@((args) => this.HandleCheckVote(vote))"
                     Color="Color.Primary">
            </MudCheckBox>
            <MudText @onclick="@((args) => this.HandleCheckVote(vote))"
                 Typo="Typo.h4"
                 Align="Align.Center"
                 Class="bulletin-item-value py-2">
              @vote.Value
            </MudText>
          </MudPaper>
        }
      </div>
    </div>
  }
</div>