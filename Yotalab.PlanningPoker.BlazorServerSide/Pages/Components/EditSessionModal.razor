@using Yotalab.PlanningPoker.BlazorServerSide.Services.Args
@using Yotalab.PlanningPoker.Grains.Interfaces.Models

<div class="modal fade" id="@this.Id" tabindex="-1" aria-labelledby="sessionOptionsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="sessionOptionsModalLabel">@this.Title</h5>
        <button type="button" class="btn-close" aria-label="Close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        @if (this.error != null)
        {
          <div class="alert alert-danger" role="alert">@this.error</div>
        }
        <form>
          <div class="mb-3">
            <label for="session-name" class="col-form-label">Имя:</label>
            <input @bind="this.sessionName" type="text" class="form-control" id="session-name">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="@(this.IsValid ? "modal" : string.Empty)" @onclick="this.ConfirmAsync">
          Подтвердить
        </button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Отмена
        </button>
      </div>
    </div>
  </div>
</div>

@code {
  private string sessionName;
  private string error;

  [Parameter]
  public string Id { get; set; }

  [Parameter]
  public string Title { get; set; }

  [Parameter]
  public SessionInfo Session { get; set; }

  [Parameter]
  public EventCallback<EditSessionArgs> OnConfirm { get; set; }

  private bool IsValid
  {
    get
    {
      return !string.IsNullOrWhiteSpace(this.sessionName);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    this.sessionName = this.Session?.Name;
  }

  private Task ConfirmAsync()
  {
    if (string.IsNullOrWhiteSpace(this.sessionName))
    {
      this.error = "Имя сессии не может быть пустым!";
      return Task.CompletedTask;
    }

    var args = new EditSessionArgs()
    {
      SessionId = this.Session == default ? Guid.NewGuid() : this.Session.Id,
      Name = this.sessionName
    };

    return this.OnConfirm.InvokeAsync(args);
  }
}