@using Yotalab.PlanningPoker.BlazorServerSide.Services.DTO

<div style="position:relative; background-color: var(--mud-palette-background); border-radius: var(--mud-default-borderradius)">
  <div class="d-none d-sm-block">
    <MudChart ChartType="ChartType.Donut"
              Class="mud-chart-legend-bottom-verticaler"
              Height="50%" Width="50%"
              InputData="@this.chartData.Select(d => d.ParticipantCount).ToArray()"
              InputLabels="@this.chartData.Select(d => d.Vote).ToArray()"
              LegendPosition="@Position.Bottom">
      <CustomGraphics>
        <g fill="black">
          <text class="text-muted" x="50%" y="47%" dominant-baseline="middle" text-anchor="middle" fill="var(--mud-palette-text-primary)" font-size="1.4" font-family="'Roboto','Helvetica','Arial','sans-serif'">
            @string.Format(UIResources.ParticipantsCount, this.PaticipantVotes.Count())
          </text>
          <text x="50%" y="53%" dominant-baseline="middle" text-anchor="middle" fill="var(--mud-palette-text-primary)" font-size="2.2" font-weight="bold" font-family="'Roboto','Helvetica','Arial','sans-serif'">
            @string.Format(UIResources.ChartAverage, this.FormatAverage(this.average))
          </text>
        </g>
      </CustomGraphics>
    </MudChart>
  </div>
  <div class="d-sm-none">
    <MudChart ChartType="ChartType.Donut"
              Class="mud-chart-legend-bottom-verticaler"
              Height="100%" Width="100%"
              InputData="@this.chartData.Select(d => d.ParticipantCount).ToArray()"
              InputLabels="@this.chartData.Select(d => d.Vote).ToArray()"
              LegendPosition="@Position.Bottom">
      <CustomGraphics>
        <g fill="black">
          <text class="text-muted" x="50%" y="47%" dominant-baseline="middle" text-anchor="middle" fill="var(--mud-palette-text-primary)" font-size="1.4" font-family="'Roboto','Helvetica','Arial','sans-serif'">
            @string.Format(UIResources.ParticipantsCount, this.PaticipantVotes.Count())
          </text>
          <text x="50%" y="53%" dominant-baseline="middle" text-anchor="middle" fill="var(--mud-palette-text-primary)" font-size="2.2" font-weight="bold" font-family="'Roboto','Helvetica','Arial','sans-serif'">
            @string.Format(UIResources.ChartAverage, this.FormatAverage(this.average))
          </text>
        </g>
      </CustomGraphics>
    </MudChart>
  </div>
</div>

@code {
  private List<ChartDataItem> chartData = new List<ChartDataItem>();
  private double average;

  [Parameter]
  public IEnumerable<ParticipantInfoDTO> PaticipantVotes { get; set; }

  protected override void OnParametersSet()
  {
    base.OnParametersSetAsync();
    this.UpdateAverage();

    this.chartData.Clear();
    var votesGroup = this.PaticipantVotes.GroupBy(v => v.Vote.Value);
    var allVotesCount = this.PaticipantVotes.Count();
    foreach (var voteGroup in votesGroup)
    {
      var voteCount = voteGroup.Count();
      var percents = (double)voteCount / (double)allVotesCount;
      this.chartData.Add(new ChartDataItem()
        {
          Vote = string.Format(UIResources.ChartVoteSummary, voteGroup.Key, this.FormatPercents(percents), voteCount),
          ParticipantCount = voteCount
        });
    }
  }

  private void UpdateAverage()
  {
    var numbersResults = this.PaticipantVotes.Where(v => v.Vote.IsNumber).Select(v => double.Parse(v.Vote.Value)).ToList();
    this.average = numbersResults.Count > 0 ? numbersResults.Average() : 0;
  }

  private string FormatPercents(double percents)
  {
    return (percents * 100) % 1 != 0 ? percents.ToString("P1") : percents.ToString("P0");
  }

  private string FormatAverage(double average)
  {
    return average % 1 != 0 ? average.ToString("N1") : average.ToString("N0");
  }

  class ChartDataItem
  {
    public string Vote { get; set; }
    public double ParticipantCount { get; set; }
  }
}
