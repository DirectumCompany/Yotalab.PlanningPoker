@using Grains.Interfaces.Models
@using Yotalab.PlanningPoker.BlazorServerSide.Services.DTO

<MudPaper>
  <MudList Dense="true" Style="padding-top: 0;padding-bottom: 0;">
    <MudListSubheader Class="ml-n2 mb-n4">
      <b>
        <span class="text-muted mr-2">
          @if (this.Session.ProcessingState == SessionProcessingState.Started)
          {
            @string.Format(UIResources.VotedParticipantsCount,
          this.PaticipantVotes.Count(pair => !Vote.Unset.Equals(pair.Vote)),
          this.PaticipantVotes.Count() - this.Session.ObserverIds.Count())
          }
          else
          {
            @string.Format(UIResources.ParticipantsCount, this.PaticipantVotes.Count())
          }
        </span>
      </b>
    </MudListSubheader>
    @foreach (var participant in this.PaticipantVotes.OrderByDescending(p => p.Id == this.ParticipantId))
    {
      <MudListItem>
        <div class="d-flex align-center justify-space-between">
          <div class="d-flex align-center">
            <div class="mr-3">
              <OnlineStatusBadge ParticipantId="participant.Id">
                <BadgeContent>
                  <Avatar Url="@participant.AvatarUrl" />
                </BadgeContent>
              </OnlineStatusBadge>
            </div>
            <MudText Class="my-0 mr-2 d-none d-md-block">
              @(string.IsNullOrEmpty(participant.Name) ? UIResources.NamelessParticipantName : participant.Name)
            </MudText>
            <MudText Class="my-0 mr-2 d-md-none" Style="flex:0">
              @(string.IsNullOrEmpty(participant.Name) ? UIResources.NamelessParticipantName : participant.Name)
            </MudText>
            @if (this.Session.ModeratorIds.Contains(participant.Id))
            {
              <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.LocalPolice" Color="Color.Warning" />
            }
            @if (this.Session.ObserverIds.Contains(participant.Id))
            {
              <MudIcon Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Info" />
            }
          </div>
          <div class="d-flex align-center">
            <MudText Color="Color.Default" Typo="Typo.h5" Align="Align.Center" Class="d-flex justify-center" Style="width: 48px; font-weight: 500;">
              @if (participant.Id == this.ParticipantId || this.Session.ProcessingState == SessionProcessingState.Stopped || this.Session.ProcessingState == SessionProcessingState.Finished)
              {
                @participant.Vote.Value
              }
              else if (!Vote.Unset.Equals(participant.Vote))
              {
                <MudIcon Icon="@Icons.Material.Filled.Done" Color="@Color.Warning" />
              }
            </MudText>
            <ParticipantMenu Participant="participant" ParticipantId="this.ParticipantId" style="min-width:48px" />
          </div>
        </div>
      </MudListItem>
    }
  </MudList>
</MudPaper>

@code {
  [Parameter]
  public IEnumerable<ParticipantInfoDTO> PaticipantVotes { get; set; }

  [Parameter]
  public Guid ParticipantId { get; set; }

  [CascadingParameter]
  public SessionInfo Session { get; set; }

  @inject ParticipantsService Service
  @inject SessionService SessionService
}
