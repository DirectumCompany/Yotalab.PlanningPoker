@{
  RenderFragment childContent =
  @<div>
    @if (this.ChildContent != null)
    {
      @this.ChildContent
    }
    else
    {
      @foreach (var item in this.Items)
      {
        <MudMenuItem OnClick="@this.CreateOnClickCallback(item)">
          @if (!string.IsNullOrWhiteSpace(item.Icon))
          {
            <MudIcon Style="pointer-events:none" Class="mud-float-left mr-2" Icon="@item.Icon" Color="@item.IconColor" />
          }
          <MudText Class="mud-float-left">@item.Title</MudText>
        </MudMenuItem>
      }
    }
  </div>;
}

@if (this.ButtonTemplate != null)
{
  <MudMenu Icon="@this.Icon" Direction="Direction.Bottom" OffsetY="true" ActivatorContent="ButtonTemplate">
    <ChildContent>
      @childContent
    </ChildContent>
  </MudMenu>
}
else
{
  <MudMenu Icon="@this.Icon" Direction="Direction.Bottom" OffsetY="true">
    <ChildContent>
      @childContent
    </ChildContent>
  </MudMenu>
}

@code {
  [Parameter]
  public string Icon { get; set; }

  [Parameter]
  public RenderFragment ButtonTemplate { get; set; }

  [Parameter]
  public RenderFragment ChildContent { get; set; }

  [Parameter]
  public IEnumerable<DropDownMenuItem> Items { get; set; }

  private EventCallback<MouseEventArgs> CreateOnClickCallback(DropDownMenuItem item)
  {
    var factory = new EventCallbackFactory();
    return item.OnClick != null ?
      factory.Create<MouseEventArgs>(this, item.OnClick) :
      factory.Create<MouseEventArgs>(this, item.OnClickAsync);
  }
}
