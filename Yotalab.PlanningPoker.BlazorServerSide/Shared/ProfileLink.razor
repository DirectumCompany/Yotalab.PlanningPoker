@using Grains.Interfaces.Models
@using Yotalab.PlanningPoker.Grains.Interfaces.Models.Notifications
@using Orleans.Streams
@inherits AuthorizedOwningComponentBase<ParticipantsService>
@implements IAsyncDisposable

@inject JSInteropFunctions JSFunctions
@inject IDialogService DialogService

@if (this.participantInfo != null)
{
  var dropDownMenuItems = new List<DropDownMenuItem>()
{
    new DropDownMenuItem()
    {
      ItemTemplate =
@<button class="dropdown-item" @onclick="@(() => EditParticipantInfoDialog.Show(this.DialogService, this.participantInfo))">
  Изменить имя
</button>
    },
    new DropDownMenuItem()
    {
      ItemTemplate =
@<form method="post" action="Identity/Account/LogOut">
  <button type="submit" class="dropdown-item">Выйти</button>
</form>
    }
  };

  <DropDownMenu ButtonId="profileLinkMenu" Items="dropDownMenuItems">
    <ButtonTemplate>
      <MudAvatar Class="avatar avatar--small me-2" Image="@this.participantInfo.AvatarUrl" Size="Size.Small" />
      <span class="text-muted fw-bold">@this.displayName</span>
    </ButtonTemplate>
  </DropDownMenu>
}

@code {
  private ParticipantInfo participantInfo;
  private string displayName;
  private StreamSubscriptionHandle<ParticipantChangedNotification> participantChangedSubscription;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    this.participantInfo = await this.Service.GetInfoAsync(this.ParticipantId);
    this.RefreshDisplayName(this.participantInfo);
    this.participantChangedSubscription = await this.Service.SubscribeAsync(this.TryRefreshIfCurrentParticipantChanged);
  }

  private Task TryRefreshIfCurrentParticipantChanged(ParticipantChangedNotification notification)
  {
    return notification.ChangedInfo.Id == this.ParticipantId ?
      this.InvokeAsync(() => this.Refresh(notification.ChangedInfo)) :
      Task.CompletedTask;
  }

  private void Refresh(ParticipantInfo info)
  {
    this.participantInfo = info;
    this.RefreshDisplayName(info);
    this.StateHasChanged();
  }

  private void RefreshDisplayName(ParticipantInfo info)
  {
    this.displayName = string.IsNullOrWhiteSpace(info?.Name) ? "Безымянный" : info.Name;
  }

  public async ValueTask DisposeAsync()
  {
    try
    {
      await this.participantChangedSubscription?.UnsubscribeAsync();
    }
    catch
    {
      // Игнорируем
    }
  }
}
