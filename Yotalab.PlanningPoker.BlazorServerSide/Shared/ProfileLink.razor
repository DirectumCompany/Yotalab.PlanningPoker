@using Grains.Interfaces.Models
@using Yotalab.PlanningPoker.Grains.Interfaces.Models.Notifications
@using Orleans.Streams
@inherits AuthorizedOwningComponentBase<ParticipantsService>
@implements IAsyncDisposable

@inject JSInteropFunctions JSFunctions
@inject IDialogService DialogService
@inject NavigationManager Navigation

@if (this.participantInfo != null)
{
  <DropDownMenu>
    <ButtonTemplate>
      <MudButton Style="text-transform:none">
        <div class="d-flex align-center">
          <Avatar ClassNames="ml-1 mr-2" Url="@this.participantInfo.AvatarUrl" IsSmall="true" />
          <MudText Class="d-none d-md-inline">@this.displayName</MudText>
        </div>
      </MudButton>
    </ButtonTemplate>
    <ChildContent>
      <MudMenuItem OnClick="@(() => EditParticipantInfoDialog.Show(this.DialogService, this.participantInfo))">
        @UIResources.EditParticipantInfoButton
      </MudMenuItem>
      <MudMenuItem Href="api/identity/account/signOut" Target="_self">@IdentityUIResources.SignOut</MudMenuItem>
      <MudDivider />
      <MudListSubheader Class="pb-0">
        @UIResources.InterfaceLanguage
      </MudListSubheader>
      <MudMenuItem OnClick="@(() => this.Navigation.NavigateToSetCulture(new System.Globalization.CultureInfo("ru")))">@UIResources.Russian</MudMenuItem>
      <MudMenuItem OnClick="@(() => this.Navigation.NavigateToSetCulture(new System.Globalization.CultureInfo("en")))">@UIResources.English</MudMenuItem>
    </ChildContent>
  </DropDownMenu>
}

@code {
  private ParticipantInfo participantInfo;
  private string displayName;
  private StreamSubscriptionHandle<ParticipantChangedNotification> participantChangedSubscription;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    this.participantInfo = await this.Service.GetInfoAsync(this.ParticipantId);
    this.RefreshDisplayName(this.participantInfo);
    this.participantChangedSubscription = await this.Service.SubscribeAsync(this.TryRefreshIfCurrentParticipantChanged);
  }

  private Task TryRefreshIfCurrentParticipantChanged(ParticipantChangedNotification notification)
  {
    return notification.ChangedInfo.Id == this.ParticipantId ?
      this.InvokeAsync(() => this.Refresh(notification.ChangedInfo)) :
      Task.CompletedTask;
  }

  private void Refresh(ParticipantInfo info)
  {
    this.participantInfo = info;
    this.RefreshDisplayName(info);
    this.StateHasChanged();
  }

  private void RefreshDisplayName(ParticipantInfo info)
  {
    this.displayName = string.IsNullOrWhiteSpace(info?.Name) ? UIResources.NamelessParticipantName : info.Name;
  }

  public async ValueTask DisposeAsync()
  {
    try
    {
      if (this.participantChangedSubscription != null)
        await this.participantChangedSubscription.UnsubscribeAsync();
    }
    catch
    {
      // Игнорируем
    }
  }
}
